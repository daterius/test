name: RDP via Tailscale

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Enable RDP + Firewall
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          # Включаем RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name fDenyTSConnections -Value 0 -Force
          # Включаем NLA (более безопасно)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name UserAuthentication -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name SecurityLayer -Value 1 -Force

          # Открываем порт 3389
          cmd /c 'netsh advfirewall firewall delete rule name="RDP-Tailscale"' | Out-Null
          cmd /c 'netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389' | Out-Null

          Restart-Service -Name TermService -Force

      - name: Create RDP user with random password
        shell: powershell
        run: |
          $chars = (65..90 + 97..122 + 48..57 + 33..47 + 58..64 + 91..96 + 123..126) | ForEach-Object {[char]$_}
          $password = -join (1..20 | ForEach-Object { $chars | Get-Random })

          if (Get-LocalUser -Name 'RDP' -ErrorAction SilentlyContinue) {
            Set-LocalUser -Name 'RDP' -Password (ConvertTo-SecureString $password -AsPlainText -Force)
          } else {
            New-LocalUser -Name 'RDP' -Password (ConvertTo-SecureString $password -AsPlainText -Force) -AccountNeverExpires -PasswordNeverExpires
          }
          Add-LocalGroupMember -Group 'Remote Desktop Users' -Member 'RDP' -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group 'Administrators' -Member 'RDP' -ErrorAction SilentlyContinue

          "RDP_USERNAME=RDP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RDP_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Tailscale
        shell: powershell
        run: |
          $msi = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi" -OutFile $msi
          Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /qn /norestart" -Wait
          Remove-Item $msi -Force

      - name: Bring up Tailscale
        shell: powershell
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $ErrorActionPreference = "Stop"
          $tsName = "gh-runner-$env:GITHUB_RUN_ID"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey "$env:TAILSCALE_AUTH_KEY" --hostname $tsName

          # Ждём IP
          $ip = $null
          1..20 | ForEach-Object {
            $ip = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) | Select-Object -First 1
            if ($ip) { return }
            Start-Sleep 3
          }
          if (-not $ip) { throw "No Tailscale IPv4 assigned." }
          "TAILSCALE_IP=$ip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Show connection info
        shell: powershell
        run: |
          Write-Host "=== RDP ACCESS ==="
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USERNAME"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "=================="

      - name: Keep alive
        shell: powershell
        run: |
          while ($true) { Write-Host "$(Get-Date) alive"; Start-Sleep 60 }
